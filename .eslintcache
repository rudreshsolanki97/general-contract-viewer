[{"/home/rudresh/Workspace/GeneralContractViewer/general-contract-viewer/src/index.js":"1","/home/rudresh/Workspace/GeneralContractViewer/general-contract-viewer/src/reportWebVitals.js":"2","/home/rudresh/Workspace/GeneralContractViewer/general-contract-viewer/src/App.js":"3","/home/rudresh/Workspace/GeneralContractViewer/general-contract-viewer/src/helpers/constant.js":"4","/home/rudresh/Workspace/GeneralContractViewer/general-contract-viewer/src/components/Header.js":"5","/home/rudresh/Workspace/GeneralContractViewer/general-contract-viewer/src/components/Dashboard.js":"6","/home/rudresh/Workspace/GeneralContractViewer/general-contract-viewer/src/wallets/metamask.js":"7","/home/rudresh/Workspace/GeneralContractViewer/general-contract-viewer/src/helpers/AbiParser.js":"8","/home/rudresh/Workspace/GeneralContractViewer/general-contract-viewer/src/components/RenderCustomView.js":"9","/home/rudresh/Workspace/dapps/gcv/src/index.js":"10","/home/rudresh/Workspace/dapps/gcv/src/App.js":"11","/home/rudresh/Workspace/dapps/gcv/src/reportWebVitals.js":"12","/home/rudresh/Workspace/dapps/gcv/src/redux/store.js":"13","/home/rudresh/Workspace/dapps/gcv/src/helpers/constant.js":"14","/home/rudresh/Workspace/dapps/gcv/src/cacheBuster.js":"15","/home/rudresh/Workspace/dapps/gcv/src/actions/index.js":"16","/home/rudresh/Workspace/dapps/gcv/src/components/Header.js":"17","/home/rudresh/Workspace/dapps/gcv/src/wallets/metamask.js":"18","/home/rudresh/Workspace/dapps/gcv/src/middleware/networkValidator.js":"19","/home/rudresh/Workspace/dapps/gcv/src/redux/reducers/index.js":"20","/home/rudresh/Workspace/dapps/gcv/src/actions/types.js":"21","/home/rudresh/Workspace/dapps/gcv/src/components/common/FunctionCard.js":"22","/home/rudresh/Workspace/dapps/gcv/src/components/common/AbiInput.js":"23","/home/rudresh/Workspace/dapps/gcv/src/components/common/AccordionWindow.js":"24","/home/rudresh/Workspace/dapps/gcv/src/components/common/BalanceModal.js":"25","/home/rudresh/Workspace/dapps/gcv/src/redux/reducers/Wallet.js":"26","/home/rudresh/Workspace/dapps/gcv/src/redux/reducers/WalletBalance.js":"27","/home/rudresh/Workspace/dapps/gcv/src/components/common/GeneralModal.js":"28","/home/rudresh/Workspace/dapps/gcv/src/components/common/RenderCustomView.js":"29","/home/rudresh/Workspace/dapps/gcv/src/components/common/ObjectComponent.js":"30","/home/rudresh/Workspace/dapps/gcv/src/components/wallet-connect/walletConnect.js":"31","/home/rudresh/Workspace/dapps/gcv/src/wallets/xinpay.js":"32","/home/rudresh/Workspace/dapps/gcv/src/components/GCV/index.js":"33","/home/rudresh/Workspace/dapps/gcv/src/components/common/Navigation.js":"34","/home/rudresh/Workspace/dapps/gcv/src/wallets/index.js":"35","/home/rudresh/Workspace/dapps/gcv/src/components/GCV/PastEvents.js":"36","/home/rudresh/Workspace/dapps/gcv/src/components/wallet-connect/Keystore.js":"37","/home/rudresh/Workspace/dapps/gcv/src/components/wallet-connect/PrivateKey.js":"38","/home/rudresh/Workspace/dapps/gcv/src/wallets/account.js":"39","/home/rudresh/Workspace/dapps/gcv/src/helpers/crypto.js":"40","/home/rudresh/Workspace/dapps/gcv/src/components/common/common.js":"41"},{"size":634,"mtime":1615203247231,"results":"42","hashOfConfig":"43"},{"size":362,"mtime":1615202677306,"results":"44","hashOfConfig":"43"},{"size":825,"mtime":1615215971139,"results":"45","hashOfConfig":"43"},{"size":28,"mtime":1615203236804,"results":"46","hashOfConfig":"43"},{"size":460,"mtime":1615203058186,"results":"47","hashOfConfig":"43"},{"size":1022,"mtime":1615220862016,"results":"48","hashOfConfig":"43"},{"size":2059,"mtime":1615221033679,"results":"49","hashOfConfig":"43"},{"size":106,"mtime":1615207095338,"results":"50","hashOfConfig":"43"},{"size":4734,"mtime":1615223539565,"results":"51","hashOfConfig":"43"},{"size":762,"mtime":1617533783956,"results":"52","hashOfConfig":"53"},{"size":1332,"mtime":1618683502730,"results":"54","hashOfConfig":"53"},{"size":362,"mtime":1617014495516,"results":"55","hashOfConfig":"53"},{"size":564,"mtime":1617525866123,"results":"56","hashOfConfig":"53"},{"size":4049,"mtime":1625326403365,"results":"57","hashOfConfig":"53"},{"size":2190,"mtime":1617018530572,"results":"58","hashOfConfig":"53"},{"size":1129,"mtime":1625321995452,"results":"59","hashOfConfig":"53"},{"size":2192,"mtime":1625325211622,"results":"60","hashOfConfig":"53"},{"size":5557,"mtime":1625320021566,"results":"61","hashOfConfig":"53"},{"size":927,"mtime":1625322335184,"results":"62","hashOfConfig":"53"},{"size":167,"mtime":1617021495884,"results":"63","hashOfConfig":"53"},{"size":484,"mtime":1618253669984,"results":"64","hashOfConfig":"53"},{"size":970,"mtime":1618682023435,"results":"65","hashOfConfig":"53"},{"size":1070,"mtime":1617539335738,"results":"66","hashOfConfig":"53"},{"size":1375,"mtime":1617529937825,"results":"67","hashOfConfig":"53"},{"size":784,"mtime":1617534208370,"results":"68","hashOfConfig":"53"},{"size":1869,"mtime":1625321889871,"results":"69","hashOfConfig":"53"},{"size":321,"mtime":1617021431864,"results":"70","hashOfConfig":"53"},{"size":1453,"mtime":1617014979188,"results":"71","hashOfConfig":"53"},{"size":12694,"mtime":1625327273826,"results":"72","hashOfConfig":"53"},{"size":981,"mtime":1617529966025,"results":"73","hashOfConfig":"53"},{"size":5675,"mtime":1625324867697,"results":"74","hashOfConfig":"53"},{"size":5161,"mtime":1625321499517,"results":"75","hashOfConfig":"53"},{"size":7653,"mtime":1625325097899,"results":"76","hashOfConfig":"53"},{"size":941,"mtime":1625315639368,"results":"77","hashOfConfig":"53"},{"size":4379,"mtime":1625321550953,"results":"78","hashOfConfig":"53"},{"size":2324,"mtime":1625324156660,"results":"79","hashOfConfig":"53"},{"size":2247,"mtime":1625306322560,"results":"80","hashOfConfig":"53"},{"size":1577,"mtime":1625306322604,"results":"81","hashOfConfig":"53"},{"size":4283,"mtime":1625324073606,"results":"82","hashOfConfig":"53"},{"size":4031,"mtime":1625311033281,"results":"83","hashOfConfig":"53"},{"size":520,"mtime":1625327251566,"results":"84","hashOfConfig":"53"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1juvphs",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1l5z3zg",{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rudresh/Workspace/GeneralContractViewer/general-contract-viewer/src/index.js",[],"/home/rudresh/Workspace/GeneralContractViewer/general-contract-viewer/src/reportWebVitals.js",[],"/home/rudresh/Workspace/GeneralContractViewer/general-contract-viewer/src/App.js",["184"],"import React, { Component } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport _ from \"lodash\";\n\nimport Header from \"./components/Header\";\nimport Dashboard from \"./components/Dashboard\";\n\nimport \"./assets/scss/main.scss\";\nimport {\n  GetCurrentProvider,\n  Connect,\n  SubmitContractTx,\n} from \"./wallets/metamask\";\n\nclass App extends Component {\n  componentDidMount() {\n    const provider = GetCurrentProvider();\n    if (!_.isEqual(\"metamask\", provider)) {\n      alert(\"please install / login into metamask\");\n    } else {\n      Connect();\n      // SubmitContractTx();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n\n        <Switch>\n          <Route path=\"/\">\n            <Dashboard />\n          </Route>\n        </Switch>\n      </div>\n    );\n  }\n}\nexport default App;\n","/home/rudresh/Workspace/GeneralContractViewer/general-contract-viewer/src/helpers/constant.js",[],"/home/rudresh/Workspace/GeneralContractViewer/general-contract-viewer/src/components/Header.js",[],"/home/rudresh/Workspace/GeneralContractViewer/general-contract-viewer/src/components/Dashboard.js",[],"/home/rudresh/Workspace/GeneralContractViewer/general-contract-viewer/src/wallets/metamask.js",["185","186"],"import Web3 from \"web3\";\n\nimport BoardroomAbi from \"../abi/boardroom.json\";\n\nlet addresses;\n\nexport function isWeb3Supported() {\n  return Boolean(window.web3 || window.ethereum);\n}\n\nexport async function initWeb3() {\n  const isWeb3Supported = isWeb3Supported();\n  if (!isWeb3Supported) return;\n\n  window.web3 = new Web3(window.web3.currentProvider);\n}\n\nexport async function Connect() {\n  if (!window.ethereum) {\n    window.web3 = new Web3(window.web3.currentProvider);\n    return window.web3;\n  }\n\n  addresses = await window.ethereum.enable().catch((error) => {\n    if (error == \"User rejected provider access\")\n      alert(\"Need Metamask for functional site\");\n    // throw new Error(\"WEB3_CONNECT_FAILED_USER_REJECTED_PROVIDER_ACCESS\");\n  });\n  return addresses;\n}\n\nexport function GetCurrentProvider() {\n  if (isWeb3Supported() !== true) return null;\n\n  if (window.web3.currentProvider.isMetaMask) return \"metamask\";\n\n  if (window.web3.currentProvider.isTrust) return \"trust\";\n\n  if (window.web3.currentProvider.isStatus) return \"status\";\n\n  if (typeof window.SOFA !== \"undefined\") return \"coinbase\";\n\n  if (typeof window.__CIPHER__ !== \"undefined\") return \"cipher\";\n\n  if (window.web3.currentProvider.constructor.name === \"EthereumProvider\")\n    return \"mist\";\n\n  if (window.web3.currentProvider.constructor.name === \"Web3FrameProvider\")\n    return \"parity\";\n\n  if (\n    window.web3.currentProvider.host &&\n    window.web3.currentProvider.host.indexOf(\"infura\") !== -1\n  )\n    return \"infura\";\n\n  if (\n    window.web3.currentProvider.host &&\n    window.web3.currentProvider.host.indexOf(\"localhost\") !== -1\n  )\n    return \"localhost\";\n\n  return \"unknown\";\n}\n\nexport async function SubmitContractTx(method, ...params) {\n  const boardRoomAddress = \"0x8ad9662F33EA75e6AbB581DE62EEC52b43436C64\";\n  const abi = BoardroomAbi;\n\n  const web3 = new Web3(window.web3.currentProvider);\n\n  const contract = new web3.eth.Contract(abi, boardRoomAddress);\n\n  const resp = await contract.methods[method](...params).call({\n    from: addresses[0],\n  });\n\n  return resp;\n}\n","/home/rudresh/Workspace/GeneralContractViewer/general-contract-viewer/src/helpers/AbiParser.js",[],"/home/rudresh/Workspace/GeneralContractViewer/general-contract-viewer/src/components/RenderCustomView.js",["187","188"],"/home/rudresh/Workspace/dapps/gcv/src/index.js",[],"/home/rudresh/Workspace/dapps/gcv/src/App.js",["189"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\n\nimport * as actions from \"./actions/index\";\n\nimport Header from \"./components/Header\";\n\nimport CacheBuster from \"./cacheBuster\";\nimport packageJson from \"../package.json\";\n\n\nimport \"./assets/scss/main.scss\";\nimport { initWeb3 } from \"./wallets/metamask\";\n\nimport GenContractInteractor from \"./components/GCV\";\n\n\n\n\nclass App extends Component {\n  componentDidMount() {\n    // initWeb3();\n  }\n\n  render() {\n    // const active = window.location.pathname;\n\n    // const links = [\n    //   { link: \"/\", name: \"home\" },\n    //   { link: \"/single-matka\", name: \"Single Matka\" },\n    // ];\n\n    return (\n      <div className=\"App\">\n        <CacheBuster>\n          {({ loading, isLatestVersion, refreshCacheAndReload }) => {\n            // console.log(\"[*] cache policy\", loading, isLatestVersion);\n            if (loading) return null;\n            console.log(`UI Version:`, packageJson.version);\n            if (!loading && !isLatestVersion) {\n              // You can decide how and when you want to force reload\n              refreshCacheAndReload();\n            }\n\n            return null;\n          }}\n        </CacheBuster>\n\n        <Header />\n\n        <GenContractInteractor />\n      </div>\n    );\n  }\n}\n\nexport default connect(null, actions)(App);\n","/home/rudresh/Workspace/dapps/gcv/src/reportWebVitals.js",[],"/home/rudresh/Workspace/dapps/gcv/src/redux/store.js",[],"/home/rudresh/Workspace/dapps/gcv/src/helpers/constant.js",["190"],"import TokenAbi from \"../abi/StorxToken.json\";\n\nimport binance from \"../assets/img/wallets/bnb.png\";\nimport xinfin from \"../assets/img/wallets/xinpay.png\";\n\nexport const SubPath = \"/\";\n\nexport const PROJECT_NAME = \"GCV\";\n\nexport const RemoveExpo = (x) => {\n  var data = String(x).split(/[eE]/);\n  if (data.length === 1) return data[0];\n\n  var z = \"\",\n    sign = x < 0 ? \"-\" : \"\",\n    str = data[0].replace(\".\", \"\"),\n    mag = Number(data[1]) + 1;\n\n  if (mag < 0) {\n    z = sign + \"0.\";\n    while (mag++) z += \"0\";\n    return z + str.replace(/^\\-/, \"\");\n  }\n  mag -= str.length;\n  while (mag--) z += \"0\";\n  return str + z;\n};\n\nexport const CONTRACT_ADDRESS = {\n  token: \"xdc5d5f074837f5d4618b3916ba74de1bf9662a3fed\",\n  // matka: \"0x7717FC488464efa40AaABB260D063d7783660C44\",\n};\n\nexport const CONTRACT_ABI = {\n  token: TokenAbi,\n  // matka: MatkaAbi,\n};\n\n/**\n * @constant VALID_CHAINS  correct chain id, in decimal\n */\nexport const VALID_CHAINS = [97, 56, 50, 51];\n\nexport const CHAIN_DATA = {\n  97: \"https://testnet.bscscan.com/\",\n  56: \"https://bscscan.com/\",\n  50: \"https://explorer.xinfin.network\",\n  51: \"https://explorer.apothem.network\",\n};\n\nexport const RPC_TO_NETWORK = {\n  \"https://data-seed-prebsc-1-s1.binance.org:8545/\": 97,\n  \"https://rpc.xinfin.network\": 50,\n  \"https://rpc.apothem.network\": 51,\n};\n\nexport const HTTP_PROVIDER = {\n  97: \"https://data-seed-prebsc-1-s1.binance.org:8545/\",\n  50: \"https://rpc.xinfin.network\",\n  51: \"https://rpc.apothem.network\",\n};\n\nexport const NETWORK_ICON = {\n  97: binance,\n  50: xinfin,\n  51: xinfin,\n};\n\nexport const WS_PROVIDER = {};\n\nexport const ObjToArr = (obj) => Object.keys(obj).map((key) => obj[key]);\n\nexport const FilterStructResp = (obj) =>\n  Object.keys(obj)\n    .filter((e, i) => {\n      if (i < Object.keys(obj).length / 2) return false;\n      return true;\n    })\n    .reduce((acc, key) => {\n      acc[key] = obj[key];\n      return acc;\n    }, {});\n\nexport const IsHex = (n) => {\n  const re = /[0-9A-Fa-f]{6}/g;\n\n  if (re.test(n)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport const GetTimerData = (seconds) => {\n  const days = Math.floor(seconds / 86400);\n  const hours = Math.floor((seconds % 86400) / 3600);\n  const minutes = Math.floor(((seconds % 86400) % 3600) / 60);\n  const sec = Math.floor(((seconds % 86400) % 3600) % 60);\n  return { days, hours, minutes, seconds: sec };\n};\n\nexport const FormatSeconds = (seconds) => {\n  const { days, hours, minutes, seconds: sec } = GetTimerData(seconds);\n  return (\n    <span className=\"timer\">\n      <span className=\"days\">{days}</span>:\n      <span className=\"hours\">{hours}</span>:\n      <span className=\"minutes\">{minutes}</span>::\n      <span className=\"seconds\">{sec}</span>\n    </span>\n  );\n};\n\nexport const AddMultiplier = (amount) => {\n  const multiplier = Math.pow(10, 18);\n\n  return RemoveExpo(parseFloat(amount) * multiplier);\n};\n\nexport const RemoveMultiplier = (amount) => {\n  const multiplier = Math.pow(10, 18);\n\n  return parseFloat(amount) / multiplier;\n};\n\nexport const TIMER_FORMAT = \"DD:HH:MM::SS\";\n\nexport const IsJson = (abi) => {\n  try {\n    JSON.parse(abi);\n  } catch (e) {\n    return false;\n  }\n  return true;\n};\n\nexport const BUILD_TX_LINK = (explorer, hash) => {\n  let retLink = `${explorer}`;\n\n  if (!retLink.endsWith(\"/\")) retLink += \"/\";\n  retLink += `tx/${hash}`;\n  return retLink;\n};\n\nexport const BUILD_BLOCK_LINK = (explorer, hash) => {\n  let retLink = `${explorer}`;\n\n  if (!retLink.endsWith(\"/\")) retLink += \"/\";\n  retLink += `block/${hash}`;\n  return retLink;\n};\n\nexport const DEFAULT_CHAIN_ID = 50;\nexport const DEFAULT_PROVIDER = HTTP_PROVIDER[VALID_CHAINS[2]];\n\nexport const EXPLORER = CHAIN_DATA[DEFAULT_CHAIN_ID];\n\nexport const LOADERS = {\n  Xinpay: \"xinpay\",\n  Keystore: \"keystore\",\n  Privatekey: \"privatekey\",\n  MetaMask: \"metamask\",\n  DcentInApp: \"dcent-inapp\",\n  DcentBridge: \"dcent-bridge\",\n};\n\nexport const NETWORK_NAME = {\n  50: \"XinFin Mainnet\",\n  51: \"XinFin Apothem\",\n  97: \"BSC Testnet\",\n  56: \"BSC Mainnet\",\n};\n\nexport const MODE = process.env.REACT_APP_MODE || \"\";\n","/home/rudresh/Workspace/dapps/gcv/src/cacheBuster.js",[],"/home/rudresh/Workspace/dapps/gcv/src/actions/index.js",[],"/home/rudresh/Workspace/dapps/gcv/src/components/Header.js",["191","192","193","194"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport { Navbar, Button, Col } from \"react-bootstrap\";\n\nimport BalanceModal from \"./common/BalanceModal\";\nimport { MODE, PROJECT_NAME } from \"../helpers/constant\";\nimport { initWeb3 } from \"../wallets/metamask\";\nimport WalletConnect from \"./wallet-connect/walletConnect\";\n\nimport GCVLogo from \"../assets/img/brand/header-logo.png\";\n\nclass Header extends React.Component {\n  renderCurrentAddressBox() {\n    if (this.props.wallet.connected === false) return \"Not Connected\";\n\n    if (!this.props.balance) return \"Loading\";\n\n    const balances = [\"native\", \"token\"];\n\n    const resp = Object.keys(this.props.balance).reduce((acc, curr) => {\n      if (balances.includes(curr)) {\n        acc.push({ name: curr, balance: this.props.balance[curr] });\n      }\n      return acc;\n    }, []);\n\n    return (\n      <>\n        <Col lg={12} sm={12} md={12}>\n          <BalanceModal data={[...resp]} />\n        </Col>\n      </>\n    );\n  }\n\n  getMode() {\n    if (MODE === \"offline\")\n      return (\n        <div className=\"network-wrapper\">\n          <div className=\"network\">\n            <div className=\"network grey\">OFFLINE</div>\n          </div>\n        </div>\n      );\n    return \"\";\n  }\n\n  getWalletBtn() {\n    let btnName = \"CONNECT\",\n      disabled = false;\n\n    if (this.props.wallet.connected && this.props.wallet.valid_network) {\n      btnName = \"WALLET CONNECTED\";\n      disabled = true;\n    } else if (\n      this.props.wallet.connected &&\n      !this.props.wallet.valid_network\n    ) {\n      btnName = \"INCORRECT NETWORK\";\n      disabled = true;\n    }\n    return (\n      <div className=\"ml-auto\">\n        <WalletConnect disabled={disabled} btnName={btnName} />\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Navbar className=\"custom-header\" bg=\"light\" expand=\"lg\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          <img src={GCVLogo} />\n        </Link>\n\n        {this.getMode()}\n\n        {this.getWalletBtn()}\n      </Navbar>\n    );\n  }\n}\n\nfunction mapStateToProps({ wallet, balance }) {\n  return { wallet, balance };\n}\n\nexport default connect(mapStateToProps)(Header);\n","/home/rudresh/Workspace/dapps/gcv/src/wallets/metamask.js",["195","196"],"import Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\n\nimport {\n  CONTRACT_ABI,\n  CONTRACT_ADDRESS,\n  AddMultiplier,\n  LOADERS,\n} from \"../helpers/constant\";\n\nimport * as actions from \"../actions\";\nimport store from \"../redux/store\";\n\nlet addresses, web3;\n\nexport function IsWeb3Supported() {\n  return Boolean(window.ethereum);\n}\n\nexport async function GetProvider() {\n  const provider = await detectEthereumProvider();\n  return provider;\n}\n\nexport async function GetChainId() {\n  return await web3.eth.net.getId();\n}\n\nexport async function initWeb3() {\n  try {\n    const isWeb3Supported = IsWeb3Supported();\n    if (!isWeb3Supported) return store.dispatch(actions.WalletDisconnected());\n    if (GetCurrentProvider() !== \"metamask\")\n      return store.dispatch(actions.WalletDisconnected());\n    // const isConnected = await window.ethereum.isConnected();\n    await window.ethereum.enable();\n    _initListerner();\n    web3 = new Web3(await GetProvider());\n    const accounts = await web3.eth.getAccounts();\n    addresses = accounts;\n    const chain_id = await web3.eth.getChainId();\n    return store.dispatch(\n      actions.WalletConnected({\n        address: accounts[0],\n        chain_id,\n        loader: LOADERS.MetaMask,\n      })\n    );\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport async function _initListerner() {\n  window.ethereum.removeAllListeners();\n\n  window.ethereum.on(\"accountsChanged\", async (data) => {\n    const accounts = await web3.eth.getAccounts();\n    addresses = accounts;\n    store.dispatch(actions.AccountChanged(accounts[0]));\n  });\n\n  window.ethereum.on(\"chainChanged\", async (data) => {\n    const chain_id = await web3.eth.getChainId();\n    store.dispatch(actions.NetworkChanged(chain_id));\n  });\n\n  window.ethereum.on(\"connect\", async (data) => {\n    web3 = new Web3(await GetProvider());\n    const accounts = await web3.eth.getAccounts();\n    const chain_id = await web3.eth.getChainId();\n    addresses = accounts;\n    return store.dispatch(\n      actions.WalletConnected({ address: accounts[0], chain_id })\n    );\n  });\n\n  window.ethereum.on(\"disconnect\", (data) => {\n    console.log(\"disconnect\", data);\n    return store.dispatch(actions.WalletDisconnected());\n  });\n\n  window.ethereum.on(\"message\", (data) => {\n    console.log(\"message\", data);\n  });\n}\n\nexport function GetCurrentProvider() {\n  if (IsWeb3Supported() !== true) return null;\n\n  if (window.web3.currentProvider.isMetaMask) return \"metamask\";\n\n  if (window.web3.currentProvider.isTrust) return \"trust\";\n\n  if (window.web3.currentProvider.isStatus) return \"status\";\n\n  if (typeof window.SOFA !== \"undefined\") return \"coinbase\";\n\n  if (typeof window.__CIPHER__ !== \"undefined\") return \"cipher\";\n\n  if (window.web3.currentProvider.constructor.name === \"EthereumProvider\")\n    return \"mist\";\n\n  if (window.web3.currentProvider.constructor.name === \"Web3FrameProvider\")\n    return \"parity\";\n\n  if (\n    window.web3.currentProvider.host &&\n    window.web3.currentProvider.host.indexOf(\"infura\") !== -1\n  )\n    return \"infura\";\n\n  if (\n    window.web3.currentProvider.host &&\n    window.web3.currentProvider.host.indexOf(\"localhost\") !== -1\n  )\n    return \"localhost\";\n\n  return \"unknown\";\n}\n\nexport const GetNativeBalance = async (address) => {\n  const web3 = new Web3(await GetProvider());\n  return web3.eth.getBalance(address);\n};\n\nexport async function SubmitContractTxGeneral(\n  method,\n  type,\n  stateMutability,\n  abi,\n  address,\n  ...params\n) {\n  try {\n    const provider = store.getState().wallet.provider;\n    const web3 = new Web3(provider);\n\n    // const { address, abi } = getContractAddress(type);\n\n    const contract = new web3.eth.Contract(abi, address);\n\n    if (stateMutability === \"view\") {\n      const resp = await contract.methods[method](...params).call();\n\n      return resp;\n    } else {\n      const gasLimit = await contract.methods[method](...params).estimateGas({\n        from: addresses[0],\n      });\n      const resp = await contract.methods[method](...params).send({\n        from: addresses[0],\n        gas: gasLimit,\n      });\n\n      return resp;\n    }\n  } catch (e) {\n    console.log(\"resp\", IsJsonRpcError(e));\n    console.log(\"resp\", e);\n    throw e;\n  }\n}\n\nexport const GetPastEvents = async (abi, address) => {\n  const web3 = new Web3(await GetProvider());\n  const contract = new web3.eth.Contract(abi, address);\n  return await contract.getPastEvents(\n    \"allEvents\",\n    {\n      fromBlock: 0,\n      toBlock: \"latest\",\n    },\n    function (error, events) {\n      console.log(\"eventsevents\", events);\n    }\n  );\n};\n\nexport const IsJsonRpcError = (err) => {\n  return err.message.split(\"\\n\")[0] === \"Internal JSON-RPC error.\";\n};\n\nexport const GetJsonRpcError = (err) => {\n  return JSON.parse(err.message.split(\"\\n\").slice(1).join(\"\").trim());\n};\n\nfunction getContractAddress(type) {\n  return {\n    address: CONTRACT_ADDRESS[type],\n    abi: CONTRACT_ABI[type],\n  };\n}\n\nexport const GetSignedTx = async (\n  abi,\n  address,\n  method,\n  { nonce, gasLimit, gasPrice, chainId },\n  ...params\n) => {\n  const state = store.getState();\n  const provider = state.wallet.provider;\n  const web3 = new Web3(new Web3.providers.HttpProvider(provider));\n  const contract = new web3.eth.Contract(abi, address);\n  const data = contract.methods[method](...params).encodeABI();\n  const tx = {\n    to: address,\n    nonce: nonce,\n    gasPrice: gasPrice,\n    gas: gasLimit,\n    data: data,\n    chainId,\n  };\n  const signed = await web3.eth.signTransaction(\n    tx,\n    state.wallet.address\n  );\n  return signed.raw;\n};\n","/home/rudresh/Workspace/dapps/gcv/src/middleware/networkValidator.js",[],"/home/rudresh/Workspace/dapps/gcv/src/redux/reducers/index.js",[],"/home/rudresh/Workspace/dapps/gcv/src/actions/types.js",[],"/home/rudresh/Workspace/dapps/gcv/src/components/common/FunctionCard.js",["197"],"import { Card, Container } from \"react-bootstrap\";\n\nimport { DynamicForm } from \"./RenderCustomView\";\n\nconst FunctionCard = ({\n  title,\n  inputs,\n  stateMutability,\n  setModalContent,\n  contractType = \"token\",\n  abi, \n  address\n}) => {\n  const mutabilityClass = `title__state-mutability ${stateMutability}`;\n  return (\n    <Card className=\"custom-card-2\">\n      <Card.Title>\n        <div className=\"title\">\n          <span className=\"title__function-name\">{title}</span>\n          <span className={mutabilityClass}>{stateMutability}</span>\n          <div className=\"title__bottom\"></div>\n        </div>\n      </Card.Title>\n      <Card.Body>\n        <DynamicForm\n          data={[...inputs]}\n          method={title}\n          contractType={contractType}\n          stateMutability={stateMutability}\n          setModalContent={setModalContent}\n          abi={abi}\n          address={address}\n        />\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default FunctionCard;\n","/home/rudresh/Workspace/dapps/gcv/src/components/common/AbiInput.js",["198"],"import React from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nfunction AbiInput({ abi = \"\", addr = \"\", setAbi, setAddress }) {\n  return (\n    <div className=\"abi-input\">\n      <Container>\n        <Row>\n          <Col lg={12} md={12} sm={12} className=\"field-name\">\n            ABI\n          </Col>\n          <Col lg={12} md={12} sm={12}>\n            <textarea\n              value\n              className=\"form-control abi-json\"\n              value={JSON.stringify(abi, null,\"\\t\")}\n              onChange={(e) => setAbi(e.target.value)}\n              spellcheck=\"false\"\n            />\n          </Col>\n        </Row>\n        <Row>\n        <Col lg={12} md={12} sm={12} className=\"field-name\">\n            Contract Addresss\n          </Col>\n          <Col lg={12} md={12} sm={12}>\n            <input\n              className=\"form-control contract-address\"\n              value={addr}\n              onChange={(e) => setAddress(e.target.value)}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default AbiInput;\n","/home/rudresh/Workspace/dapps/gcv/src/components/common/AccordionWindow.js",["199","200","201","202","203"],"import React, { Component } from \"react\";\nimport _ from \"lodash\";\n\nimport { Container, Row, Col, Card, Accordion } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faChevronRight,\n  faChevronDown,\n  faCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nclass AccordionWindow extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      active: props.defActive === true ? \"0\" : \"-1\",\n    };\n  }\n\n  renderSymbol() {\n    return this.state.active === \"0\" ? faChevronDown : faChevronRight;\n  }\n\n  render() {\n    return (\n      <Accordion className=\"liquidator-config\" activeKey={this.state.active}>\n        <Card>\n          <Accordion.Toggle\n            as={Card.Header}\n            eventKey=\"0\"\n            onClick={() =>\n              this.setState({ active: this.state.active === \"0\" ? \"-1\" : \"0\" })\n            }\n          >\n            <span>{this.props.title}</span>\n            <span className=\"u-float-r\">\n              <FontAwesomeIcon icon={this.renderSymbol()} />\n            </span>\n          </Accordion.Toggle>\n          <Accordion.Collapse eventKey=\"0\">\n            <Card.Body className={this.props.childClass}>\n              {this.props.children}\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    );\n  }\n}\n\nexport default AccordionWindow;\n","/home/rudresh/Workspace/dapps/gcv/src/components/common/BalanceModal.js",[],"/home/rudresh/Workspace/dapps/gcv/src/redux/reducers/Wallet.js",[],"/home/rudresh/Workspace/dapps/gcv/src/redux/reducers/WalletBalance.js",[],"/home/rudresh/Workspace/dapps/gcv/src/components/common/GeneralModal.js",[],"/home/rudresh/Workspace/dapps/gcv/src/components/common/RenderCustomView.js",["204","205","206","207"],"import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col, Button, Form } from \"react-bootstrap\";\nimport copy from \"copy-to-clipboard\";\nimport _ from \"lodash\";\n\nimport {\n  GetJsonRpcError,\n  IsJsonRpcError,\n  SubmitContractTxGeneral,\n} from \"../../wallets\";\nimport { EXPLORER, LOADERS, MODE } from \"../../helpers/constant\";\nimport { GeneralObjectViewer } from \"./ObjectComponent\";\nimport { GetSignedTx } from \"../../wallets\";\nimport { RenderQR } from \"./common\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCopy } from \"@fortawesome/free-solid-svg-icons\";\nimport { toast } from \"react-toastify\";\nimport store from \"../../redux/store\";\n\nconst RenderInput = ({ field, ...inputProps }) => (\n  <Row>\n    <Col lg={4} md={4} sm={12}>\n      <label className=\"form-control\">{field}</label>\n    </Col>\n    <Col lg={8} md={8} sm={12}>\n      <input className=\"form-control\" {...inputProps} />\n    </Col>\n  </Row>\n);\n/**\n *\n * !FIX: DOB & File input types\n */\nexport const RenderInputCustomType = ({\n  field,\n  onChange: cb,\n  type = \"text\",\n  value,\n  setInput,\n  onBlur = () => {},\n  formData,\n  setFormData,\n  ...inputProps\n}) => {\n  let customInput = null;\n  switch (type) {\n    case \"text\":\n    case \"number\":\n      customInput = (\n        <input\n          type={type}\n          className=\"form-control\"\n          onChange={(e) => {\n            cb(e.target.value);\n          }}\n          value={value}\n          onBlur={(e) => onBlur(e, { setInput, formData, setFormData })}\n          {...inputProps}\n        />\n      );\n      break;\n    case \"select\":\n      customInput = (\n        <select\n          className=\"form-control\"\n          onChange={(e) => {\n            cb(e.target.value);\n          }}\n          value={value}\n        >\n          {inputProps.options.map(({ label, value: curVal }, i) => (\n            <option key={i + 1} value={curVal}>\n              {label}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    case \"radio\":\n      customInput = (\n        <>\n          {inputProps.options.map(({ value: curVal, label }, i) => (\n            <div className=\"input-dynamic-form__input-radio\" key={i + 1}>\n              <Form.Label>\n                <input\n                  type={type}\n                  value={curVal}\n                  name={field}\n                  key={i + 1}\n                  onClick={(e) => {\n                    cb(e.target.value);\n                  }}\n                  defaultChecked={curVal === value}\n                />\n                {label}\n              </Form.Label>\n            </div>\n          ))}\n        </>\n      );\n      break;\n    default:\n      return <></>;\n  }\n  return (\n    <Row>\n      <Col lg={4} md={4} sm={12}>\n        <label className=\"form-control\">{field}</label>\n      </Col>\n      <Col lg={8} md={8} sm={12}>\n        {customInput}\n      </Col>\n    </Row>\n  );\n};\n\nexport const RenderInputCustomType2 = ({\n  field,\n  onChange: cb,\n  type = \"text\",\n  value,\n  setInput,\n  onBlur = () => {},\n  formData,\n  setFormData,\n  ...inputProps\n}) => {\n  let customInput = null;\n  switch (type) {\n    case \"text\":\n    case \"number\":\n      customInput = (\n        <input\n          type={type}\n          className=\"form-control\"\n          onChange={(e) => {\n            cb(e.target.value);\n          }}\n          value={value}\n          onBlur={(e) => onBlur(e, { setInput, formData, setFormData })}\n          {...inputProps}\n        />\n      );\n      break;\n    case \"select\":\n      customInput = (\n        <select\n          className=\"form-control\"\n          onChange={(e) => {\n            cb(e.target.value);\n          }}\n          value={value}\n        >\n          {inputProps.options.map(({ label, value: curVal }, i) => (\n            <option key={i + 1} value={curVal}>\n              {label}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    case \"radio\":\n      customInput = (\n        <>\n          {inputProps.options.map(({ value: curVal, label }, i) => (\n            <div className=\"input-dynamic-form__input-radio\" key={i + 1}>\n              <Form.Label>\n                <input\n                  type={type}\n                  value={curVal}\n                  name={field}\n                  key={i + 1}\n                  onClick={(e) => {\n                    cb(e.target.value);\n                  }}\n                  defaultChecked={curVal === value}\n                />\n                {label}\n              </Form.Label>\n            </div>\n          ))}\n        </>\n      );\n      break;\n    default:\n      return <></>;\n  }\n  return (\n    <Row>\n      <Col lg={12} md={12} sm={12}>\n        <label className=\"form-control field-label\">{field}</label>\n      </Col>\n      <Col className=\"field-input\" lg={12} md={12} sm={12}>\n        {customInput}\n      </Col>\n    </Row>\n  );\n};\n\nfunction RawTxForm({ cb, data, params }) {\n  const state = store.getState();\n\n  const [nonce, setnonce] = useState(0);\n  const [gasPrice, setgasPrice] = useState(9000);\n  const [gasLimit, setgasLimit] = useState(50000);\n  const [chainId, setchainId] = useState(state.wallet.chain_id);\n\n  if (![LOADERS.Privatekey, LOADERS.Keystore].includes(state.wallet.loader)) {\n    return \"Only compatible with Private Key & Keystore connections\";\n  }\n\n  return (\n    <Container>\n      <hr />\n      <br />\n\n      <Row>\n        <Col sm={12} lg={4} md={4}>\n          Chain ID\n        </Col>\n        <Col sm={12} lg={8} md={8}>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            value={chainId}\n            onChange={(e) => setchainId(e.target.value)}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={12} lg={4} md={4}>\n          Nonce\n        </Col>\n        <Col sm={12} lg={8} md={8}>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            value={nonce}\n            onChange={(e) => setnonce(e.target.value)}\n          />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col sm={12} lg={4} md={4}>\n          Gas Price\n        </Col>\n        <Col sm={12} lg={8} md={8}>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            value={gasPrice}\n            onChange={(e) => setgasPrice(e.target.value)}\n          />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col sm={12} lg={4} md={4}>\n          Gas Limit\n        </Col>\n        <Col sm={12} lg={8} md={8}>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            value={gasLimit}\n            onChange={(e) => setgasLimit(e.target.value)}\n          />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col className={\"u-float-r\"}>\n          <Button\n            onClick={async () => {\n              console.log(\"{ nonce, gasLimit, gasPrice, chainId }\", {\n                nonce,\n                gasLimit,\n                gasPrice,\n                chainId,\n              });\n              const rawTx = await GetSignedTx(\n                data.abi,\n                data.address,\n                data.method,\n                { nonce, gasLimit, gasPrice, chainId },\n                ...params\n              );\n              cb(rawTx);\n            }}\n          >\n            Get QR\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nfunction RenderRawTx(x) {\n  return (\n    <Container>\n      <Row>\n        <Col className=\"u-text-center\">\n          <h3>Signed TX HASH</h3>\n        </Col>\n      </Row>\n\n      <hr />\n\n      <Row>\n        <Col className=\"u-text-center qr-code-wrapper\">{RenderQR(x, 200)}</Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <Button\n            className=\"u-float-r\"\n            onClick={() => {\n              copy(x);\n              toast(\"copied\", { autoClose: 1000 });\n            }}\n          >\n            <FontAwesomeIcon icon={faCopy} />\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\n/**\n *\n * @param {*} props class properties\n */\nexport const DynamicForm = (props) => {\n  const [inputs, setInputs] = useState(\n    props.data.map(({ value = \"\", defaultValue = \"\" }) => {\n      if (value !== \"\") {\n        return value;\n      } else if (defaultValue !== \"\") {\n        return defaultValue;\n      }\n    })\n  );\n\n  const [loading, setLoading] = useState(false);\n  const [showRawTxForm, setshowRawTx] = useState(false);\n  const [formData, setFormDatas] = useState(props.data);\n\n  useEffect(() => {\n    setFormDatas(props.data);\n  }, [props.data]);\n\n  const setInput = (i, v) => setInputs(Object.assign([...inputs], { [i]: v }));\n  const setFormData = (i, v) =>\n    setFormDatas(Object.assign([...formData], { [i]: v }));\n\n  return (\n    <Container className=\"custom-input-1 dynamic-form\">\n      {formData.map(({ name, type, ...rest }, i) => (\n        <RenderInputCustomType2\n          field={name}\n          type={type}\n          value={inputs[i]}\n          key={i}\n          setInput={(i, e) => setInput(i, e)}\n          onChange={(e) => setInput(i, e)}\n          formData={formData}\n          setFormData={setFormData}\n          {...rest}\n        />\n      ))}\n      {props.stateMutability !== \"view\" ? (\n        <Button onClick={() => setshowRawTx(!showRawTxForm)}>Sign</Button>\n      ) : (\n        \"\"\n      )}\n\n      <Button\n        onClick={() => {\n          setLoading(true);\n          SubmitContractTxGeneral(\n            props.method,\n            props.contractType || \"token\",\n            props.stateMutability,\n            props.abi,\n            props.address,\n            ...inputs\n          )\n            .then((resp) => {\n              let respStr;\n              if (_.isObject(resp) === true)\n                respStr = GeneralObjectViewer(resp);\n              else respStr = `${resp}`;\n\n              if (resp && resp.transactionHash) {\n                const content = (\n                  <Container>\n                    <Row>\n                      <Col lg={4} md={4} sm={4}>\n                        <span>Transaction Hash</span>\n                      </Col>\n                      <Col lg={8} md={8} sm={8}>\n                        <span>\n                          {/* <a\n                            target=\"_blank\"\n                            href={`${EXPLORER}/tx/${resp.transactionHash}`}\n                          >\n                            TX HASH\n                          </a> */}\n                        </span>\n                      </Col>\n                    </Row>\n                  </Container>\n                );\n                props.setModalContent(content);\n              } else if (resp !== null) {\n                const content = (\n                  <Container>\n                    <Row>\n                      <Col lg={4} md={4} sm={4}>\n                        <span>Response</span>\n                      </Col>\n                      <Col lg={8} md={8} sm={8}>\n                        <span>{respStr}</span>\n                      </Col>\n                    </Row>\n                  </Container>\n                );\n                props.setModalContent(content);\n              } else {\n                props.setModalContent(\"error\");\n              }\n\n              setLoading(false);\n            })\n            .catch((e) => {\n              console.log(\"err\", e);\n              if (IsJsonRpcError(e)) {\n                const err = GetJsonRpcError(e);\n                props.setModalContent(`Error: ${err.message}`);\n                setLoading(false);\n                return;\n              }\n              alert(\"Error\");\n              setLoading(false);\n            });\n        }}\n        variant=\"primary\"\n        style={{ width: \"10rem\", float: \"right\" }}\n        disabled={loading || MODE === \"offline\"}\n      >\n        Submit\n      </Button>\n\n      <Row>\n        <Col>\n          {showRawTxForm ? (\n            <RawTxForm\n              data={props}\n              params={inputs}\n              cb={(x) => {\n                console.log(\"rawTX\", x);\n                props.setModalContent(RenderRawTx(x));\n              }}\n            />\n          ) : (\n            \"\"\n          )}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport const SelectOption = [{ label: \"Select\", value: null }];\n\nexport const DynamicActionBtn = (props) => {\n  const [loading, setLoading] = useState(false);\n  let customBtn = null;\n  switch (props.type) {\n    case \"actionBtn\":\n      customBtn = (\n        <Button\n          variant={props.options.variant}\n          onClick={() => {\n            setLoading(false);\n            // PostApi(props.api, \"\", () => setLoading(true));\n          }}\n        >\n          {\" \"}\n          {props.options.name}\n        </Button>\n      );\n      break;\n    default:\n      return <></>;\n  }\n  return customBtn;\n};\n","/home/rudresh/Workspace/dapps/gcv/src/components/common/ObjectComponent.js",[],"/home/rudresh/Workspace/dapps/gcv/src/components/wallet-connect/walletConnect.js",["208"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Container, Row, Col, Modal, Button } from \"react-bootstrap\";\n\nimport Keystore from \"./Keystore\";\nimport PrivateKey from \"./PrivateKey\";\n\nimport { PROJECT_NAME, DEFAULT_CHAIN_ID, MODE } from \"../../helpers/constant\";\nimport { initXdc3 } from \"../../wallets/xinpay\";\nimport { initWeb3 } from \"../../wallets/metamask\";\n\nimport * as actions from \"../../actions\";\n\nimport MetamaskIcon from \"../../assets/img/wallets/metamask.webp\";\nimport XinPayIcon from \"../../assets/img/wallets/xinpay.png\";\n// import DCent from \"../../assets/img/wallets/dcent.png\";\n\nimport { toast } from \"react-toastify\";\n// import { initDcent } from \"../../wallets/dcentInAppBrowser\";\n\nconst Provider = {\n  menu: \"menu\",\n  keystore: \"keystore\",\n  privateKey: \"privatekey\",\n};\n\nconst WalletProviders = [\n  {\n    name: \"metamask\",\n    icon: MetamaskIcon,\n    provider: initWeb3,\n    rowClass: MODE === \"offline\" ? \"disabled\" : \"\",\n  },\n  {\n    type: \"menu\",\n    name: \"xinpay\",\n    icon: XinPayIcon,\n    provider: initXdc3,\n    rowClass: MODE === \"offline\" ? \"disabled\" : \"\",\n  },\n  {\n    type: \"privatekey\",\n    name: \"privatekey\",\n    icon: XinPayIcon,\n    provider: () => {},\n    rowClass: \"\",\n  },\n  {\n    type: \"keystore\",\n    name: \"keystore\",\n    icon: XinPayIcon,\n    provider: () => {},\n    rowClass: \"\",\n  },\n  // {\n  //   type: \"menu\",\n  //   name: \"Dcent ( coming soon )\",\n  //   icon: DCent,\n  //   provider: initDcent,\n  //   rowClass: \"disabled\",\n  // },\n];\n\nclass WalletConnect extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showModal: false,\n      providerSelected: Provider.menu,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.wallet.connected !== this.props.wallet.connected &&\n      this.props.wallet.connected\n    ) {\n      this.setState({ showModal: false }, () => {\n        toast(\"Wallet Connected\", { autoClose: 2000 });\n      });\n    }\n  }\n\n  accountCallback = (loader) => (account) => {\n    if (account === null)\n      toast(\"error while loading wallet\", { autoClose: 2000, type: \"error\" });\n    else {\n      this.props.WalletConnected({\n        account,\n        chain_id: this.props.wallet.chain_id,\n        address: account.address,\n        loader,\n      });\n      this.setState({ showModal: false, providerSelected: Provider.menu });\n    }\n  };\n\n  RenderWalletProvider() {\n    if (this.state.providerSelected === Provider.menu)\n      return (\n        <Container>\n          <Row>\n            {WalletProviders.map(({ name, icon, provider, type, rowClass }) => (\n              <Col sm={12}>\n                <Container>\n                  <Row\n                    className={rowClass}\n                    onClick={async () => {\n                      await provider();\n                      if (this.state.providerSelected !== type)\n                        this.setState({ providerSelected: type });\n                    }}\n                  >\n                    <Col className=\"wallet-icon--wrapper\" sm={2} lg={2} md={2}>\n                      <div className=\"wallet-icon\">\n                        <img src={icon} alt={\"logo\"} />\n                      </div>\n                    </Col>\n                    <Col\n                      className=\"wallet-name-wrapper\"\n                      sm={10}\n                      lg={10}\n                      md={10}\n                    >\n                      <div className=\"wallet-name\">{name}</div>\n                    </Col>\n                  </Row>\n                </Container>\n              </Col>\n            ))}\n          </Row>\n        </Container>\n      );\n\n    if (this.state.providerSelected === Provider.keystore)\n      return (\n        <Container>\n          <Row>\n            <Keystore cb={this.accountCallback(Provider.keystore)} />\n          </Row>\n          <Row>\n            <Button\n              onClick={() => {\n                this.setState({ providerSelected: Provider.menu });\n              }}\n            >\n              Back\n            </Button>\n          </Row>\n        </Container>\n      );\n\n    if (this.state.providerSelected === Provider.privateKey)\n      return (\n        <Container>\n          <Row>\n            <PrivateKey cb={this.accountCallback(Provider.privateKey)} />\n          </Row>\n          <Row>\n            <Button\n              onClick={() => {\n                this.setState({ providerSelected: Provider.menu });\n              }}\n            >\n              Back\n            </Button>\n          </Row>\n        </Container>\n      );\n  }\n\n  render() {\n    const BTN_MSG = this.props.btnName || \"CONNECT\";\n    const disabled = this.props.disabled || false;\n\n    return (\n      <div className=\"wallet-connect\">\n        <Button\n          variant={this.props.variant || \"primary\"}\n          onClick={() => this.setState({ showModal: true })}\n          disabled={disabled}\n        >\n          {BTN_MSG}\n        </Button>\n        <Modal\n          className=\"wallet-connect\"\n          show={this.state.showModal}\n          onHide={() => this.setState({ showModal: false })}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>{PROJECT_NAME}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>{this.RenderWalletProvider()}</Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"secondary\"\n              onClick={() => this.setState({ showModal: false })}\n            >\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ wallet }) {\n  return { wallet };\n}\n\nexport default connect(mapStateToProps, actions)(WalletConnect);\n","/home/rudresh/Workspace/dapps/gcv/src/wallets/xinpay.js",["209","210"],"import Xdc3, { utils } from \"xdc3\";\n\nimport detectEthereumProvider from \"@metamask/detect-provider\";\n\nimport * as actions from \"../actions\";\nimport store from \"../redux/store\";\nimport { LOADERS } from \"../helpers/constant\";\nimport { GetRevertReason } from \"../helpers/crypto\";\n\nlet addresses, xdc3;\n\nexport function IsXdc3Supported() {\n  return Boolean(window.ethereum);\n}\n\nexport async function GetProvider() {\n  const provider = await detectEthereumProvider();\n  return provider;\n}\n\nexport async function GetChainId() {\n  let xdc3 = new Xdc3(await GetProvider());\n  return await xdc3.eth.net.getId();\n}\n\nexport async function initXdc3() {\n  try {\n    const isXdc3Supported = IsXdc3Supported();\n    if (!isXdc3Supported) return store.dispatch(actions.WalletDisconnected());\n    if ((await GetCurrentProvider()) !== \"xinpay\")\n      return store.dispatch(actions.WalletDisconnected());\n    // const isConnected = await window.ethereum.isConnected();\n    await window.ethereum.enable();\n    _initListerner();\n    const provider = await GetProvider();\n    xdc3 = new Xdc3(provider);\n    const accounts = await xdc3.eth.getAccounts();\n    addresses = accounts;\n    const chain_id = await xdc3.eth.getChainId();\n    return store.dispatch(\n      actions.WalletConnected({ address: accounts[0], chain_id })\n    );\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport async function _initListerner() {\n  window.ethereum.removeAllListeners();\n\n  window.ethereum.on(\"accountsChanged\", async (data) => {\n    const accounts = await xdc3.eth.getAccounts();\n    addresses = accounts;\n    store.dispatch(actions.AccountChanged(accounts[0]));\n  });\n\n  window.ethereum.on(\"chainChanged\", async (data) => {\n    const chain_id = await xdc3.eth.getChainId();\n    store.dispatch(actions.NetworkChanged(chain_id));\n  });\n\n  window.ethereum.on(\"connect\", async (data) => {\n    xdc3 = new Xdc3(await GetProvider());\n    const accounts = await xdc3.eth.getAccounts();\n    const chain_id = await xdc3.eth.getChainId();\n    addresses = accounts;\n    return store.dispatch(\n      actions.WalletConnected({\n        address: accounts[0],\n        chain_id,\n        loader: LOADERS.Xinpay,\n      })\n    );\n  });\n\n  window.ethereum.on(\"disconnect\", (data) => {\n    console.log(\"disconnect\", data);\n    return store.dispatch(actions.WalletDisconnected());\n  });\n\n  window.ethereum.on(\"message\", (data) => {\n    console.log(\"message\", data);\n  });\n}\n\nexport async function GetCurrentProvider() {\n  if (IsXdc3Supported() !== true) return null;\n\n  if (window.web3.currentProvider.isMetaMask) {\n    const chainId = await GetChainId();\n    console.log(\"chainId\", chainId, [50, 51].includes(chainId));\n    if ([50, 51].includes(chainId)) return \"xinpay\";\n    return \"metamask\";\n  }\n\n  if (window.web3.currentProvider.isTrust) return \"trust\";\n\n  if (window.web3.currentProvider.isStatus) return \"status\";\n\n  if (typeof window.SOFA !== \"undefined\") return \"coinbase\";\n\n  if (typeof window.__CIPHER__ !== \"undefined\") return \"cipher\";\n\n  if (window.web3.currentProvider.constructor.name === \"EthereumProvider\")\n    return \"mist\";\n\n  if (window.web3.currentProvider.constructor.name === \"Xdc3FrameProvider\")\n    return \"parity\";\n\n  if (\n    window.web3.currentProvider.host &&\n    window.web3.currentProvider.host.indexOf(\"infura\") !== -1\n  )\n    return \"infura\";\n\n  if (\n    window.web3.currentProvider.host &&\n    window.web3.currentProvider.host.indexOf(\"localhost\") !== -1\n  )\n    return \"localhost\";\n\n  return \"unknown\";\n}\n\nexport const GetNativeBalance = (address) => {\n  const xdc3 = new Xdc3(window.web3.currentProvider);\n  return xdc3.eth.getBalance(address);\n};\n\nexport async function SubmitContractTxGeneral(\n  method,\n  type,\n  stateMutability,\n  abi,\n  address,\n  ...params\n) {\n  try {\n    const state = store.getState();\n    const xdc3 = new Xdc3(await GetProvider());\n\n    // const { address, abi } = getContractAddress(type);\n\n    const contract = new xdc3.eth.Contract(abi, address);\n\n    if (stateMutability === \"view\") {\n      const resp = await contract.methods[method](...params).call();\n\n      return resp;\n    } else {\n      const gasLimit = await contract.methods[method](...params).estimateGas({\n        from: state.wallet.address,\n      });\n      const resp = await contract.methods[method](...params).send({\n        from: state.wallet.address,\n        gas: gasLimit,\n      });\n\n      return resp;\n    }\n  } catch (e) {\n    console.log(\"resp\", IsJsonRpcError(e));\n    console.log(\"resp\", e);\n    throw e;\n  }\n}\n\nexport const IsJsonRpcError = (err) => {\n  return err.message.split(\"\\n\")[0] === \"Internal JSON-RPC error.\";\n};\n\nexport const GetPastEvents = async (abi, address) => {\n  const xdc3 = new Xdc3(await GetProvider());\n  const contract = new xdc3.eth.Contract(abi, address);\n  return await contract.getPastEvents(\"allEvents\", {\n    fromBlock: 0,\n    toBlock: \"latest\",\n  });\n};\n\nexport const GetJsonRpcError = (err) => {\n  return JSON.parse(err.message.split(\"\\n\").slice(1).join(\"\").trim());\n};\n\nexport function fromXdcAddress(address) {\n  return utils.fromXdcAddress(address);\n}\n\nexport function toXdcAddress(address) {\n  return utils.toXdcAddress(address).toLowerCase();\n}\n","/home/rudresh/Workspace/dapps/gcv/src/components/GCV/index.js",[],"/home/rudresh/Workspace/dapps/gcv/src/components/common/Navigation.js",["211"],"import React, { useState } from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\n\nconst PageNavigation = ({ setactivePath, activePath, links }) => {\n  return (\n    <div className=\"page-navigation\">\n      <Container>\n        <Row>\n          <Col>\n            <div className=\"page-navigation__wrapper\">\n              {links.map(({ name, link, disabled = false }) => (\n                <span\n                  className={\n                    disabled\n                      ? \"disabled nav-link__\"\n                      : link === activePath\n                      ? \"nav-link__ active\"\n                      : \"nav-link__\"\n                  }\n                  to={link}\n                  onClick={() => setactivePath(link)}\n                >\n                  {name}\n                </span>\n              ))}\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default PageNavigation;\n","/home/rudresh/Workspace/dapps/gcv/src/wallets/index.js",["212"],"import Xdc3 from \"xdc3\";\nimport { toast } from \"react-toastify\";\n\nimport * as xinpay from \"./xinpay\";\nimport * as account from \"./account\";\n\nimport store from \"../redux/store\";\nimport {\n  EXPLORER,\n  LOADERS,\n  DEFAULT_PROVIDER,\n  BUILD_TX_LINK,\n} from \"../helpers/constant\";\n\nfunction GetFuncFromLoader(loader) {\n  switch (loader) {\n    case LOADERS.Xinpay:\n      return xinpay;\n    case LOADERS.Keystore:\n      return account;\n    case LOADERS.Privatekey:\n      return account;\n    default:\n      return xinpay;\n  }\n}\n\n/**\n *\n *\n * @note directly get from default provider\n *\n */\nexport function GetNativeBalance() {\n  const state = store.getState();\n  return new Promise((resolve, reject) => {\n    const xdc3 = new Xdc3(\n      new Xdc3.providers.HttpProvider(state.wallet.provider)\n    );\n    const wallet = store.getState();\n    const address = wallet.wallet.address;\n    xdc3.eth.getBalance(address).then(resolve).catch(reject);\n  });\n}\n\nexport function IsLocked(...params) {\n  return new Promise((resolve, reject) => {\n    const wallet = store.getState();\n    GetFuncFromLoader(wallet.wallet.chain_id)\n      .IsLocked(...params)\n      .then((resp) => {\n        resolve(resp);\n      })\n      .catch((e) => {\n        console.log(\"resp\", IsJsonRpcError(e));\n        console.log(\"resp\", e);\n        reject(e);\n      });\n  });\n}\n\nexport function SubmitContractTxGeneral(...params) {\n  return new Promise((resolve, reject) => {\n    const wallet = store.getState();\n    let toastId;\n    if (params[2] !== \"view\")\n      toastId = toast(\"Processing TX ...\", {\n        position: \"bottom-right\",\n        type: \"processing-tx\",\n        autoClose: false,\n        hideProgressBar: false,\n        closeOnClick: false,\n        pauseOnHover: true,\n        draggable: false,\n        progress: undefined,\n        closeButton: false,\n      });\n\n    GetFuncFromLoader(wallet.wallet.loader)\n      .SubmitContractTxGeneral(...params)\n      .then((resp) => {\n        if (resp.transactionHash) {\n          const { transactionHash } = resp;\n          toast(\n            <div>\n              Sucsess&nbsp;\n              <a\n                href={BUILD_TX_LINK(EXPLORER, transactionHash)}\n                // href={`${EXPLORER}/tx/${transactionHash}`}\n                rel=\"noreferrer\"\n                target=\"_blank\"\n              >\n                HASH\n              </a>\n            </div>,\n            {\n              position: \"bottom-right\",\n              type: \"success-tx\",\n              autoClose: false,\n              hideProgressBar: false,\n              closeButton: true,\n              closeOnClick: false,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            }\n          );\n        }\n\n        resolve(resp);\n      })\n      .catch((e) => {\n        console.log(\"resp\", IsJsonRpcError(e));\n        console.log(\"resp\", e, e.message);\n        const message = e.message || <>Failing Transaction</>;\n        toast(\n          <div>\n            <b>Error</b>:{message}\n          </div>,\n          {\n            position: \"bottom-right\",\n            type: \"error\",\n            autoClose: false,\n            hideProgressBar: false,\n            closeButton: true,\n            closeOnClick: false,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          }\n        );\n        reject(e);\n      })\n      .finally(() => {\n        if (toastId) toast.dismiss(toastId);\n      });\n  });\n}\n\nexport async function GetFromAddress(hash) {\n  const wallet = store.getState();\n  return await GetFuncFromLoader(wallet.wallet.chain_id).GetFromAddress(hash);\n}\n\nexport const IsJsonRpcError = (err) => {\n  return err.message.split(\"\\n\")[0] === \"Internal JSON-RPC error.\";\n};\n\nexport const GetJsonRpcError = (err) => {\n  return JSON.parse(err.message.split(\"\\n\").slice(1).join(\"\").trim());\n};\n\nexport const IsAddressEqual = (a, b) => {\n  a = xinpay.fromXdcAddress(a).toLowerCase();\n  b = xinpay.fromXdcAddress(b).toLowerCase();\n  return a === b;\n};\n\nexport async function GetPastEvents(abi, address) {\n  console.log(\"eventsevents\");\n  const wallet = store.getState();\n  return await GetFuncFromLoader(wallet.wallet.loader).GetPastEvents(\n    abi,\n    address\n  );\n}\n\nexport function GetSignedTx(...params) {\n  const wallet = store.getState();\n  return GetFuncFromLoader(wallet.wallet.loader).GetSignedTx(...params);\n}\n","/home/rudresh/Workspace/dapps/gcv/src/components/GCV/PastEvents.js",["213"],"import React, { Component } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nimport { GetPastEvents } from \"../../wallets\";\n\nclass PastEvents extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: [],\n    };\n\n    this.loaded = false;\n  }\n\n  renderReturnValues(returnValues) {\n    return (\n      <Container>\n        {Object.keys(returnValues)\n          .filter((x) => isNaN(x))\n          .map((v, i) => (\n            <Row key={i} style={{ textAlign: \"left\" }}>\n              <Col lg={4}>{v}</Col>\n              <Col lg={8}>{returnValues[v]}</Col>\n            </Row>\n          ))}\n      </Container>\n    );\n  }\n\n  componentDidMount() {\n    this.getEvents();\n  }\n\n  componentDidUpdate() {\n    if ((this.loaded = false)) {\n      this.getEvents();\n    }\n  }\n\n  getEvents() {\n    if (this.props.wallet.connected && this.props.wallet.valid_network)\n      GetPastEvents(this.props.abi, this.props.address).then((x) => {\n        console.log(\"events\", x);\n        this.setState({ data: x });\n        this.loaded = true;\n      });\n  }\n\n  renderEvents() {\n    return (\n      <Container className=\"past-events\">\n        <Row className=\"header\" key={0}>\n          <Col lg={3}>TX HASH</Col>\n          <Col lg={3}>EVENT NAME</Col>\n          <Col lg={6}>RETURN VALUES</Col>\n        </Row>\n        {this.state.data\n          .sort(({ blockNumber: a }, { blockNumber: b }) => b - a)\n          .map((v, i) => (\n            <Row className=\"event-row\" key={i + 1}>\n              <Col lg={3}>\n                <a\n                  target=\"_blank\"\n                  href={`${this.props.wallet.explorer}/tx/${v.transactionHash}`}\n                >\n                  HASH\n                </a>\n              </Col>\n              <Col lg={3}>{v.event}</Col>\n              <Col lg={6}>{this.renderReturnValues(v.returnValues)}</Col>\n            </Row>\n          ))}\n      </Container>\n    );\n  }\n\n  render() {\n    if (this.props.wallet.connected && this.props.wallet.valid_network) {\n      return (\n        <div style={{ color: \"white\", textAlign: \"center\" }}>\n          {this.renderEvents()}\n        </div>\n      );\n    } else\n      return (\n        <div style={{ color: \"white\", textAlign: \"center\" }}>\n          PLEASE CONNECT WALLET\n        </div>\n      );\n  }\n}\n\nexport default PastEvents;\n","/home/rudresh/Workspace/dapps/gcv/src/components/wallet-connect/Keystore.js",[],"/home/rudresh/Workspace/dapps/gcv/src/components/wallet-connect/PrivateKey.js",[],"/home/rudresh/Workspace/dapps/gcv/src/wallets/account.js",["214","215","216","217"],"import Xdc3 from \"xdc3\";\n\nimport _, { add } from \"lodash\";\n\nimport {\n  CONTRACT_ABI,\n  CONTRACT_ADDRESS,\n  DEFAULT_PROVIDER,\n} from \"../helpers/constant\";\n\nimport store from \"../redux/store\";\nimport { GetRevertReason } from \"../helpers/crypto\";\n\n/**\n *\n * directly deals with an account represented in an object from Xdc3 / Web3\n *\n */\n\n/**\n *\n * const account = {address, privateKey}\n *\n *\n */\n\nexport async function init() {}\n\nexport async function SubmitContractTxGeneral(\n  method,\n  type,\n  stateMutability,\n  abi,\n  address,\n  ...params\n) {\n  return new Promise(async (resolve, reject) => {\n    const data = store.getState();\n    const { account } = data.wallet;\n    if (!account) reject(\"Account not loaded\");\n    const { privateKey } = account;\n    if (_.isEmpty(privateKey)) reject(\"Account not loaded\");\n\n    const xdc3 = new Xdc3(\n      new Xdc3.providers.HttpProvider(data.wallet.provider)\n    );\n\n    const contract = new xdc3.eth.Contract(abi, address);\n\n    if (stateMutability === \"view\") {\n      contract.methods[method](...params)\n        .call()\n        .then((resp) => {\n          resolve(resp);\n        })\n        .catch(reject);\n    } else if (stateMutability === \"payable\") {\n      const [value] = params.splice(params.length - 1, 1);\n\n      const data = contract.methods[method](...params).encodeABI();\n\n      const state = store.getState();\n      const { address: walletAddress } = state.wallet;\n\n      const tx = {\n        from: walletAddress.toLowerCase(),\n        to: address,\n        data,\n        value,\n      };\n\n      let gasLimit;\n\n      try {\n        gasLimit = await xdc3.eth.estimateGas(tx);\n      } catch (e) {\n        const reason = await GetRevertReason(tx);\n        reject({ message: reason });\n        return;\n      }\n\n      tx[\"gas\"] = gasLimit;\n\n      const signed = await xdc3.eth.accounts.signTransaction(tx, privateKey);\n      xdc3.eth\n        .sendSignedTransaction(signed.rawTransaction)\n        .once(\"receipt\", (receipt) => {\n          if (receipt !== null) {\n            if (receipt.status) {\n              resolve(receipt);\n            } else {\n              reject(receipt);\n            }\n          }\n        });\n\n      // })\n      // .catch(reject);\n    } else {\n      const data = contract.methods[method](...params).encodeABI();\n\n      const state = store.getState();\n      const { address: walletAddress } = state.wallet;\n\n      const tx = {\n        from: walletAddress.toLowerCase(),\n        to: address,\n        data,\n      };\n\n      let gasLimit;\n\n      try {\n        gasLimit = await xdc3.eth.estimateGas(tx);\n      } catch (e) {\n        const reason = await GetRevertReason(tx);\n        reject({ message: reason });\n        return;\n      }\n\n      tx[\"gas\"] = gasLimit;\n\n      const signed = await xdc3.eth.accounts.signTransaction(tx, privateKey);\n      xdc3.eth\n        .sendSignedTransaction(signed.rawTransaction)\n        .once(\"receipt\", (receipt) => {\n          if (receipt !== null) {\n            if (receipt.status) {\n              resolve(receipt);\n            } else {\n              reject(receipt);\n            }\n          }\n        });\n    }\n  });\n}\n\nexport const GetSignedTx = async (\n  abi,\n  address,\n  method,\n  { nonce, gasLimit, gasPrice, chainId },\n  ...params\n) => {\n  const state = store.getState();\n  console.log(\"state.wallet.account\", state.wallet.account);\n  const provider = state.wallet.provider;\n  const xdc3 = new Xdc3(new Xdc3.providers.HttpProvider(provider));\n  const contract = new xdc3.eth.Contract(abi, address);\n  const data = contract.methods[method](...params).encodeABI();\n  const tx = {\n    to: address,\n    nonce: nonce,\n    gasPrice: gasPrice,\n    gas: gasLimit,\n    data: data,\n    chainId: parseFloat(chainId),\n  };\n  const signed = await xdc3.eth.accounts.signTransaction(\n    tx,\n    state.wallet.account.privateKey\n  );\n  return signed.rawTransaction;\n};\n\nexport const GetPastEvents = async (abi, address) => {\n  const state = store.getState();\n  console.log(\"state.wallet.account\", state.wallet.account);\n  const provider = state.wallet.provider;\n  const xdc3 = new Xdc3(new Xdc3.providers.HttpProvider(provider));\n  const contract = new xdc3.eth.Contract(abi, address);\n  return await contract.getPastEvents(\"allEvents\", {\n    fromBlock: 0,\n    toBlock: \"latest\",\n  });\n};\n","/home/rudresh/Workspace/dapps/gcv/src/helpers/crypto.js",["218"],"import store from \"../redux/store\";\n\nconst Xdc3 = require(\"xdc3\");\nconst Accounts = require(\"xdc3-eth-accounts\");\nconst { utils } = Xdc3;\nconst { TransferType, DEFAULT_PROVIDER } = require(\"./constant\");\n\n/**\n * \n * \n * Private key                                                         Address\n503f38a9c967ed597e47fe25643985f032b072db8075426a92110f82df48dfcb    0x5B38Da6a701c568545dCfcB03FcB875f56beddC4\n7e5bfb82febc4c2c8529167104271ceec190eafdca277314912eaabdb67c6e5f    0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2\ncc6d63f85de8fef05446ebdd3c537c72152d0fc437fd7aa62b3019b79bd1fdd4    0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db\n638b5c6c8c5903b15f0d3bf5d3f175c64e6e98a10bdb9768a2003bf773dcb86a    0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB\nf49bf239b6e554fdd08694fde6c67dac4d01c04e0dda5ee11abee478983f3bc0    0x617F2E2fD72FD9D5503197092aC168c91465E7f2\nadeee250542d3790253046eee928d8058fd544294a5219bea152d1badbada395    0x17F6AD8Ef982297579C203069C1DbfFE4348c372\n097ffe12069dcb3c3d99e6771e2cbf491a9b8b2f93ff4d3468f550c5e8264755    0x5c6B0f7Bf3E7ce046039Bd8FABdfD3f9F5021678\n5f58e8b9f1867ef00578b6f03e159428ab168f776aa445bc3ecdb02c7db8e865    0x03C6FcED478cBbC9a4FAB34eF9f40767739D1Ff7\n290e721ac87c7b3f31bef7b70104b9280ed3fa1425a59451490c9c02bf50d08f    0x1aE0EA34a72D944a8C7603FfB3eC30a6669E454C\n27efe944ff128cf510ab447b529eec28772f13bf65ebf1cbd504192c4f26e9d8    0x0A098Eda01Ce92ff4A4CCb7A4fFFb5A43EBC70DC\n3cd7232cd6f3fc66a57a6bedc1a8ed6c228fff0a327e169c2bcc5e869ed49511    0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c\n2ac6c190b09897cd8987869cc7b918cfea07ee82038d492abce033c75c1b1d0c    0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C\ndae9801649ba2d95a21e688b56f77905e5667c44ce868ec83f82e838712a2c7a    0x4B0897b0513fdC7C541B6d9D7E929C4e5364D2dB\nd74aa6d18aa79a05f3473dd030a97d3305737cbc8337d940344345c1f6b72eea    0x583031D1113aD414F02576BD6afaBfb302140225\n71975fbf7fe448e004ac7ae54cad0a383c3906055a65468714156a07385e96ce    0xdD870fA1b7C4700F2BD7f44238821C26f7392148\n * \n * \n */\n\nconst generateStub = (type, params) => {\n  switch (type) {\n    case TransferType.token:\n      return {\n        params: [params.to, params.amount, params.token],\n      };\n    case TransferType.native:\n    default:\n      return {\n        params: [params.to, params.amount],\n      };\n  }\n};\n\nexport const Computehash = ({\n  nonce,\n  transferType = TransferType.native,\n  ...params\n}) => {\n  const stub = generateStub(transferType, params);\n  const hash = utils.soliditySha3(...stub.params, nonce).toString(\"hex\");\n  return hash;\n};\n\nexport const Sign = (privateKey, msg) => {\n  try {\n    return new Accounts().sign(msg, privateKey);\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const VerifyPrivateKey = (privateKey) => {\n  if (privateKey.startsWith(\"0x\")) privateKey = privateKey.replace(\"0x\", \"\");\n  return /^[0-9a-fA-F]{64}$/.test(privateKey);\n};\n\nexport const GetAccountFromPK = (privateKey) => {\n  try {\n    if (!privateKey.startsWith(\"0x\")) privateKey = \"0x\" + privateKey;\n    return new Accounts().privateKeyToAccount(privateKey);\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const GetAccountFromKeystore = (keystore, pwd) => {\n  try {\n    if (typeof keystore !== \"string\") keystore = keystore.toString();\n    return new Accounts().decrypt(keystore, pwd);\n  } catch (e) {\n    console.log(e);\n    return null;\n  }\n};\n\nexport const IsValidAddress = (address) => {\n  return utils.isAddress(address);\n};\n\nexport const GetRevertReason = (tx) => {\n  const data = store.getState();\n  return new Promise((resolve, reject) => {\n    const xdc3 = new Xdc3(\n      new Xdc3.providers.HttpProvider(data.wallet.provider)\n    );\n    xdc3.eth\n      .call(tx)\n      .then((x) => {\n        console.log(\"x\", x, utils.toAscii(x));\n        const other = x.replace(\"0x\", \"\").slice(8);\n        const buf = Buffer.from(other, \"hex\");\n        const reason = buf\n          .toString()\n          .split(\"\")\n          .filter((x) => /^[a-zA-Z\\d\\s:]+$/i.test(x))\n          .join(\"\");\n        console.log(reason);\n        resolve(reason);\n      })\n      .catch(reject);\n  });\n};\n","/home/rudresh/Workspace/dapps/gcv/src/components/common/common.js",[],{"ruleId":"219","severity":1,"message":"220","line":12,"column":3,"nodeType":"221","messageId":"222","endLine":12,"endColumn":19},{"ruleId":"223","severity":1,"message":"224","line":12,"column":27,"nodeType":"221","messageId":"225","endLine":12,"endColumn":42},{"ruleId":"226","severity":1,"message":"227","line":25,"column":15,"nodeType":"228","messageId":"229","endLine":25,"endColumn":17},{"ruleId":"219","severity":1,"message":"230","line":7,"column":7,"nodeType":"221","messageId":"222","endLine":7,"endColumn":18},{"ruleId":"219","severity":1,"message":"231","line":173,"column":10,"nodeType":"221","messageId":"222","endLine":173,"endColumn":17},{"ruleId":"219","severity":1,"message":"232","line":14,"column":10,"nodeType":"221","messageId":"222","endLine":14,"endColumn":18},{"ruleId":"233","severity":1,"message":"234","line":22,"column":30,"nodeType":"235","messageId":"236","endLine":22,"endColumn":31,"suggestions":"237"},{"ruleId":"219","severity":1,"message":"238","line":5,"column":18,"nodeType":"221","messageId":"222","endLine":5,"endColumn":24},{"ruleId":"219","severity":1,"message":"239","line":8,"column":16,"nodeType":"221","messageId":"222","endLine":8,"endColumn":28},{"ruleId":"219","severity":1,"message":"232","line":9,"column":10,"nodeType":"221","messageId":"222","endLine":9,"endColumn":18},{"ruleId":"240","severity":1,"message":"241","line":75,"column":11,"nodeType":"242","endLine":75,"endColumn":32},{"ruleId":"219","severity":1,"message":"243","line":7,"column":3,"nodeType":"221","messageId":"222","endLine":7,"endColumn":16},{"ruleId":"219","severity":1,"message":"244","line":188,"column":10,"nodeType":"221","messageId":"222","endLine":188,"endColumn":28},{"ruleId":"219","severity":1,"message":"245","line":1,"column":16,"nodeType":"221","messageId":"222","endLine":1,"endColumn":25},{"ruleId":"246","severity":1,"message":"247","line":16,"column":15,"nodeType":"248","messageId":"249","endLine":16,"endColumn":53},{"ruleId":"219","severity":1,"message":"250","line":2,"column":8,"nodeType":"221","messageId":"222","endLine":2,"endColumn":9},{"ruleId":"219","severity":1,"message":"245","line":4,"column":10,"nodeType":"221","messageId":"222","endLine":4,"endColumn":19},{"ruleId":"219","severity":1,"message":"251","line":4,"column":21,"nodeType":"221","messageId":"222","endLine":4,"endColumn":24},{"ruleId":"219","severity":1,"message":"252","line":4,"column":26,"nodeType":"221","messageId":"222","endLine":4,"endColumn":29},{"ruleId":"219","severity":1,"message":"253","line":9,"column":3,"nodeType":"221","messageId":"222","endLine":9,"endColumn":11},{"ruleId":"219","severity":1,"message":"254","line":11,"column":10,"nodeType":"221","messageId":"222","endLine":11,"endColumn":18},{"ruleId":"219","severity":1,"message":"230","line":20,"column":7,"nodeType":"221","messageId":"222","endLine":20,"endColumn":18},{"ruleId":"255","severity":1,"message":"256","line":338,"column":56,"nodeType":"257","messageId":"258","endLine":338,"endColumn":58},{"ruleId":"219","severity":1,"message":"231","line":480,"column":10,"nodeType":"221","messageId":"222","endLine":480,"endColumn":17},{"ruleId":"219","severity":1,"message":"259","line":8,"column":24,"nodeType":"221","messageId":"222","endLine":8,"endColumn":40},{"ruleId":"219","severity":1,"message":"260","line":8,"column":10,"nodeType":"221","messageId":"222","endLine":8,"endColumn":25},{"ruleId":"219","severity":1,"message":"261","line":66,"column":5,"nodeType":"221","messageId":"222","endLine":66,"endColumn":14},{"ruleId":"219","severity":1,"message":"262","line":1,"column":17,"nodeType":"221","messageId":"222","endLine":1,"endColumn":25},{"ruleId":"219","severity":1,"message":"263","line":11,"column":3,"nodeType":"221","messageId":"222","endLine":11,"endColumn":19},{"ruleId":"264","severity":1,"message":"265","line":64,"column":17,"nodeType":"242","messageId":"266","endLine":67,"endColumn":18,"fix":"267"},{"ruleId":"219","severity":1,"message":"268","line":3,"column":13,"nodeType":"221","messageId":"222","endLine":3,"endColumn":16},{"ruleId":"219","severity":1,"message":"269","line":6,"column":3,"nodeType":"221","messageId":"222","endLine":6,"endColumn":15},{"ruleId":"219","severity":1,"message":"270","line":7,"column":3,"nodeType":"221","messageId":"222","endLine":7,"endColumn":19},{"ruleId":"219","severity":1,"message":"263","line":8,"column":3,"nodeType":"221","messageId":"222","endLine":8,"endColumn":19},{"ruleId":"219","severity":1,"message":"271","line":6,"column":23,"nodeType":"221","messageId":"222","endLine":6,"endColumn":39},"no-unused-vars","'SubmitContractTx' is defined but never used.","Identifier","unusedVar","no-use-before-define","'isWeb3Supported' was used before it was defined.","usedBeforeDefined","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'RenderInput' is assigned a value but never used.","'loading' is assigned a value but never used.","'initWeb3' is defined but never used.","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["272","273"],"'Button' is defined but never used.","'PROJECT_NAME' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'AddMultiplier' is defined but never used.","'getContractAddress' is defined but never used.","'Container' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'_' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'faCircle' is defined but never used.","'EXPLORER' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'DEFAULT_CHAIN_ID' is defined but never used.","'GetRevertReason' is defined but never used.","'addresses' is assigned a value but never used.","'useState' is defined but never used.","'DEFAULT_PROVIDER' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"274","text":"275"},"'add' is defined but never used.","'CONTRACT_ABI' is defined but never used.","'CONTRACT_ADDRESS' is defined but never used.","'DEFAULT_PROVIDER' is assigned a value but never used.",{"messageId":"276","fix":"277","desc":"278"},{"messageId":"279","fix":"280","desc":"281"},[1662,1662]," rel=\"noreferrer\"","removeEscape",{"range":"282","text":"283"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"284","text":"285"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[543,544],"",[543,543],"\\"]